extends ./_layout

block title
  |Tree

block content
  au-panel
    .markdown-body
      :markdown-it
        # AuTree
        树组件支持动态加载，自定义按钮等功能。

        ## 例子
        ### 基础用法
    demo
      au-tree(:data="treeData")
      template(type="au-demo")
        script.
          const treeData = [
            {
              label: '中国',
              children: [
                {label: '山西', children: [{label: '长治'}],
                {label: '山东'},
                {label: '广州'},
              ]
            },
            {
              label: '美国',
              children: [
                {label: '加州', children: [{label: '洛杉矶'}, {label: '旧金山'}],
                {label: '这个州'},
                {label: '那个州'},
              ]
            },
          ];
          export default {
            data: {
              treeData: treeData
            }
          }

    .markdown-body
      :markdown-it
        ### 默认展开
    demo
      au-tree(:data="treeData", default-expand-all)
      template(type="au-demo")
        script.
          const treeData = [
            {
              label: '中国',
              children: [
                {label: '山西', children: [{label: '长治'}],
                {label: '山东'},
                {label: '广州'},
              ]
            },
            {
              label: '美国',
              children: [
                {label: '加州', children: [{label: '洛杉矶'}, {label: '旧金山'}],
                {label: '这个州'},
                {label: '那个州'},
              ]
            },
          ];
          export default {
            data: {
              treeData: treeData
            }
          }

    .markdown-body
      :markdown-it
        ### 动态加载
        `loader`属性传入loader方法。该方法将在没有子节点是触发。

        `loader(currentNode, done)` 接受两个参数。`currentNode`当前节点数据。`done`为一个方法，执行后结束将告知组件加载完毕。
    demo
      au-tree(:data="treeData2", :loader="loadMore")
      h4 当前 treeData2 的数据：
      pre {{JSON.stringify(treeData2, '', '  ')}}
      template(type="au-demo")
        script.
          const treeData2 = [{label: '5', value: 5}];
          export default {
            data: {
              treeData2: treeData2
            },
            methods: {
              loadMore (data, done) {
                // 延迟 1秒 加载子节点
                setTimeout(function(){
                  if (data.value > 0) {
                    let children = [];
                    let nextValue = data.value-1;
                    for(let i=1; i<=nextValue; i++) {
                      children.push({label: `${nextValue}-${i}`, value: nextValue});
                    }
                    // 因为没有初始children 所以需要重新初始子项
                    Vue.set(data, 'children', children);
                  }
                  done();
                }, 1000);
              }
            }
          }

    .markdown-body
      :markdown-it
        ### 自定义内容 & checkable
        通过vue的 [`scopeSlots`](http://vuejs.org/v2/guide/components.html#Scoped-Slots) 实现自定义内容。

        `checkable` 属性展示一个checkbox用于数据选择。通过check事件通知选中数据变化，传入的数据只包含最后一级节点。
        > 暂不支持默认选中
    demo
      au-tree(:data="treeData", checkable, :click-row-expand="false", @check="checked")
        template(scope="scope")
          au-flex
            au-item(flex="1")|自定义-{{ scope.data.label }}
            au-item
              au-button(type="primary", size="mini")|编辑
              au-button(type="danger", size="mini")|删除
      h4 当前选中的数据：
      pre {{JSON.stringify(checkedData, '', '  ')}}
      template(type="au-demo")
        script.
          const treeData = [
            {
              label: '中国',
              children: [
                {label: '山西', children: [{label: '长治'}],
                {label: '山东'},
                {label: '广州'},
              ]
            },
            {
              label: '美国',
              children: [
                {label: '加州', children: [{label: '洛杉矶'}, {label: '旧金山'}],
                {label: '这个州'},
                {label: '那个州'},
              ]
            },
          ];
          export default {
            data: {
              treeData: treeData,
              checkedData: []
            },
            methods: {
              checked(data){
                this.checkedData = data;
              }
            }
          }

    .markdown-body
      :markdown-it
        ## 属性
        |        属性        |                                              说明                                              |   类型   | 默认值 |
        |--------------------|------------------------------------------------------------------------------------------------|----------|--------|
        | data               | 数据内容(格式为[{label: "", children: []}], label是显示的文字, children是子结点数组)           | Array    | []     |
        | default-expand-all | 是否默认展开全部节点                                                                           | Boolean  | false  |
        | loader             | 异步加载子节点的函数, 如果children为null时, 展开节点会调用loader, 格式为loader(data, callback) | Function | null   |
        | click-row-expand   | 是否点击整行展开折叠                                                                           | Boolean  | true   |
        | checkable          | 是否使用单选框                                                                                 | Boolean  | false  |
        | expands            | 表示展开的元素                                                                                 | Array    | []     |

        ## 事件
        |  名称 |         说明         |
        |-------|----------------------|
        | check | tree可选择时选中触发 |

block script
  script.
    const treeData = [
      {
        label: '中国',
        children: [
          {label: '山西', children: [{label: '长治'}]},
          {label: '山东'},
          {label: '广州'},
        ]
      },
      {
        label: '美国',
        children: [
          {label: '加州', children: [{label: '洛杉矶'}, {label: '旧金山'}]},
          {label: '这个州'},
          {label: '那个州'},
        ]
      },
    ];
    const treeData2 = [{label: '5', value: 5}];
    new Vue({
      el: '#app',
      mixins,
      data () {
        return {
          treeData,
          treeData2,
          checkedData: []
        }
      },
      methods: {
        loadMore (data, done) {
          setTimeout(function(){
            if (data.value > 0) {
              let children = [];
              let nextValue = data.value-1;
              for(let i=1; i<=nextValue; i++) {
                children.push({label: `${nextValue}-${i}`, value: nextValue});
              }
              Vue.set(data, 'children', children);
            }
            done();
          }, 1000);
        },
        checked(data){
          this.checkedData = data;
        }
      }
    })
